# Напишите программу, которая получает целое число и возвращает его двоичное, восьмеричное строковое представление.
# Функции bin и oct используйте для проверки своего результата.
# *Дополнительно
# Попробуйте избежать дублирования кода в преобразованиях к разным системам счисления
# Избегайте магических чисел
# Добавьте аннотацию типов где это возможно
# Используйте функции



def getList_1(n):   # создаем локальную функцию для вычисления списка чисел
    while n // 2 != 0:  # запускаем цикл, пока число делится на 2 и не равно 0
        list_1.append(n % 2)    # заполняем список проверкой деления числа на 2 (с остатком 0 и 1, чёт/нечет)
        n: int = n // 2     # присваиваем новое значение n - число от целочисленного деления n на 2
        if n == 1:  # задаем условие для n, когда оно станет = 1 (последнее число) 
            list_1.append(1)    # -> заполняем список числом 1 (т.к. 1 // 2 = 0)
    return list_1


def getBinaryNumber(list_1):    # создаем локальную функцию для вычисления числа в двоичной системе счисления
    str_number = ""     # создаем пустую строку
    for i in list_1:    # проходимся по списку list_1 циклом for
        str_number += str(i)    # заполняем строку числами из списка list_1
    reversed_number = str_number[::-1]  # применяем срез для "переворота" полученного строкового числа
    return(reversed_number)


def getList_2(n):   # создаем локальную функцию для вычисления списка чисел
    if n < 8:   # если введенное число меньше 8 - оно равно числу в восьмеричной системе, 
        list_2.append(n)    # т.к. само по себе является остатком при делении на 8
    else:
        while n // 8 != 0:  # запускаем цикл, пока число делится на 8 и не равно 0
            list_2.append(n % 8)    # заполняем список остатками от деления числа на 8
            n: int = n // 8     # присваиваем новое значение n - число от целочисленного деления n на 8
            if n < 8:   # задаем условие для n, если в результате деления оно станет меньше 8, - это число и будет остатком 
                list_2.append(n)    # -> вносим его в список
    return list_2


def getOctNumber(list_2):   # создаем локальную функцию для вычисления числа в восьмиричной системе счисления
    string_number = ""
    for i in list_2:
        string_number += str(i)
    reversed_number_2 = string_number[::-1]
    return(reversed_number_2)



n = int(input("Введите число: "))
list_1 = []
list_2 = []

getList_1(n)
print(getBinaryNumber(list_1))
print(bin(n))   # проверка встроенной функцией bin

getList_2(n)
print(getOctNumber(list_2))
print(oct(n))   # проверка встроенной функцией oct
